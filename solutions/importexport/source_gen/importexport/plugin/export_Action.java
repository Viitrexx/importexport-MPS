package importexport.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.logging.rt.LogContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class export_Action extends BaseAction {
  private static final Icon ICON = null;

  public export_Action() {
    super("Export model to INI file", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setActionAccess(ActionAccess.UNDO_PROJECT);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    LogContext.with(export_Action.class, null, null).info("Export");
    String content = "";
    SNode root;
    if (SNodeOperations.isInstanceOf(event.getData(MPSCommonDataKeys.NODE), CONCEPTS.BaseContent$si)) {
      root = (SNode) SNodeOperations.getParent(event.getData(MPSCommonDataKeys.NODE));
    } else if (SNodeOperations.isInstanceOf(event.getData(MPSCommonDataKeys.NODE), CONCEPTS.File$CR)) {
      root = (SNode) event.getData(MPSCommonDataKeys.NODE);
    } else {
      LogContext.with(export_Action.class, null, null).error("Export action invoked in wrong model.");
      return;
    }
    for (SNode child : ListSequence.fromList(SLinkOperations.getChildren(root, LINKS.content$Kqdr))) {
      if (SNodeOperations.isInstanceOf(child, CONCEPTS.Comment$9R)) {
        content += ";" + SPropertyOperations.getString(((SNode) child), PROPS.comment$ylhV) + System.lineSeparator();
      } else if (SNodeOperations.isInstanceOf(child, CONCEPTS.SectionHeader$Rk)) {
        content += "[" + SPropertyOperations.getString(((SNode) child), PROPS.header$hLuo) + "]" + System.lineSeparator();
      } else if (SNodeOperations.isInstanceOf(child, CONCEPTS.KeyValue$ab)) {
        SNode kv = ((SNode) child);
        content += SPropertyOperations.getString(kv, PROPS.key$By_t) + " = " + SPropertyOperations.getString(kv, PROPS.value$FaoT) + System.lineSeparator();
      }
    }

    JFrame frame = new JFrame();
    frame.setVisible(false);
    JFileChooser jfc = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("INI", "ini");
    jfc.setFileFilter(filter);
    jfc.setSelectedFile(new File(SPropertyOperations.getString(root, PROPS.name$MnvL) + ".ini"));
    jfc.setDialogTitle("Choose save location.");
    int userSelection = jfc.showSaveDialog(frame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      File selectedFile = jfc.getSelectedFile();
      try {
        FileWriter fw = new FileWriter(selectedFile);
        fw.write(content);
        fw.close();
      } catch (IOException ioe) {
        LogContext.with(export_Action.class, null, null).error(ioe);
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BaseContent$si = MetaAdapterFactory.getConcept(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52cccdL, "ini.structure.BaseContent");
    /*package*/ static final SConcept File$CR = MetaAdapterFactory.getConcept(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb512301L, "ini.structure.File");
    /*package*/ static final SConcept Comment$9R = MetaAdapterFactory.getConcept(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52d090L, "ini.structure.Comment");
    /*package*/ static final SConcept SectionHeader$Rk = MetaAdapterFactory.getConcept(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52d802L, "ini.structure.SectionHeader");
    /*package*/ static final SConcept KeyValue$ab = MetaAdapterFactory.getConcept(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52e040L, "ini.structure.KeyValue");
  }

  private static final class PROPS {
    /*package*/ static final SProperty comment$ylhV = MetaAdapterFactory.getProperty(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52d090L, 0x4878b309fb52d4a4L, "comment");
    /*package*/ static final SProperty header$hLuo = MetaAdapterFactory.getProperty(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52d802L, 0x4878b309fb52de02L, "header");
    /*package*/ static final SProperty key$By_t = MetaAdapterFactory.getProperty(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52e040L, 0x4878b309fb52e46cL, "key");
    /*package*/ static final SProperty value$FaoT = MetaAdapterFactory.getProperty(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb52e040L, 0x4878b309fb52e4d6L, "value");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink content$Kqdr = MetaAdapterFactory.getContainmentLink(0x7f902c7db9de4f86L, 0x8d2e38710197ee79L, 0x4878b309fb512301L, 0x4878b309fb52c886L, "content");
  }
}
